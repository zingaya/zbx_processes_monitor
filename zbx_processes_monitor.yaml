zabbix_export:
  version: '6.4'
  template_groups:
    - uuid: 26f42bba0c4448c290fa5423bb4a2664
      name: 'Custom Templates'
  templates:
    - uuid: 430b8fd981c8459db2be5e212661333e
      template: 'Processes monitor'
      name: 'Processes monitor'
      description: |
        Monitor processes/services that must be running.
        Use the macro to define a list of process to be monitored, what of those are critical, 
        You can use macro context to specify thresholds on a single process
        
        Requires Zabbix agent 6.2 and later
      groups:
        - name: 'Custom Templates'
      items:
        - uuid: e021e274efb3446a8a7e36757d34e97a
          name: 'Get raw process info'
          type: ZABBIX_ACTIVE
          key: proc.get
          delay: 0;m/1
          history: 1h
          trends: '0'
          value_type: TEXT
          description: 'Get all processes but filters the ones in the macro and also filters some other fields.'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  // Remove some unneeded fields 
                  
                  var processString = '{$PROCESSES.LIST}';
                  var processArray = processString.split(',');
                  var processFilter = [];
                  for (var i = 0; i < processArray.length; i++) {
                    processFilter.push(processArray[i].trim());
                  }
                  
                  var Jsonvalue = JSON.parse(value);
                  var filteredJson = [];
                  
                  for (var key in Jsonvalue) {
                    if (Jsonvalue.hasOwnProperty(key)) {
                      var obj = Jsonvalue[key];
                      if (processFilter.indexOf(obj.name) !== -1) {
                        filteredJson.push({
                          name: obj.name,
                          cputime_user: obj.cputime_user,
                          cputime_system: obj.cputime_system,
                          pid: obj.pid,
                          cmdline: obj.cmdline,
                          threads: obj.threads,
                          memory: obj.rss,
                          swap: obj.swap,
                          user: obj.user
                        });
                      }
                    }
                  }
                  
                  return JSON.stringify(filteredJson);
          tags:
            - tag: component
              value: raw
      discovery_rules:
        - uuid: f6d092d8e8dc42ce8c2229fcd3e490ac
          name: 'Create processes'
          type: SCRIPT
          key: get.processes
          params: |
            // Discover based on {$PROCESSES.LIST} Macro
            var obj = JSON.parse(value);
            var inputlist = obj.inputlist;
            var processArray = inputlist.split(',');
            var cmdlist = obj.commandlist;
            var cmdArray = cmdlist.split(',');
            var mmlist = obj.maxmemlist;
            var mmArray = mmlist.split(',');
            
            // Remove "CHANGE_THIS" from the array
            for (var i = processArray.length - 1; i >= 0; i--) {
              if (processArray[i] === "CHANGE_THIS") {
                processArray.splice(i, 1);
              }
            }
            
            function parseMemory(memory) {
              const units = { B: 1, K: 1024, M: 1024 * 1024, G: 1024 * 1024 * 1024, T: 1024 * 1024 * 1024 * 1024 };
              const unit = memory.charAt(memory.length - 1).toUpperCase();
              if (units[unit]) {
                const numericValue = parseFloat(memory.slice(0, -1));
                if (!isNaN(numericValue)) {
                  return numericValue * units[unit];
                }
              }
              return parseInt(memory); // If no unit or not recognized, treat as integer bytes
            }
            
            var processes = processArray.map(function (process, index) {
              return {
                "process": process,
                "command": cmdArray[index] || process,
                "maxmemory": parseMemory(mmArray[index]) || 0
              };
            });
            
            return JSON.stringify(processes);
          lifetime: 1h
          item_prototypes:
            - uuid: c9b943010f434560b0418034006e811f
              name: 'Process {#PROCESS.NAME} command line'
              type: DEPENDENT
              key: 'proc[{#PROCESS.NAME},cmdline]'
              delay: '0'
              history: 365d
              trends: '0'
              value_type: TEXT
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.[?(@.name=="{#PROCESS.NAME}")].cmdline.first()'
                  error_handler: DISCARD_VALUE
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1w
              master_item:
                key: proc.get
              tags:
                - tag: component
                  value: 'process-{#PROCESS.NAME}'
              trigger_prototypes:
                - uuid: fffafb48d50e48a5a1b343feecab1355
                  expression: |
                    find(/Processes monitor/proc[{#PROCESS.NAME},cmdline],,,{$PROCESSES.CMD:"{#PROCESS.NAME}"})=0
                    and
                    last(/Processes monitor/proc[{#PROCESS.NAME},cmdline])<>""
                  name: 'Process {#PROCESS.NAME} is not being executed with the expected command line or arguments'
                  opdata: 'Command: {ITEM.LASTVALUE2} Expected: {$PROCESSES.CMD:"{#PROCESS.NAME}"}'
                  priority: INFO
                  description: 'Check if the process was manually executed with other parameters, or path, Or if had a change on how is executed, modify the macro that handles this trigger in order to match the new command line.'
                  dependencies:
                    - name: 'Process {#PROCESS.NAME} is not running'
                      expression: |
                        max(/Processes monitor/proc[{#PROCESS.NAME},running],5m)=0
                        and
                        last(/Processes monitor/proc[{#PROCESS.NAME},cmdline])<>""
                      recovery_expression: 'last(/Processes monitor/proc[{#PROCESS.NAME},running])>0'
                  tags:
                    - tag: scope
                      value: notice
            - uuid: 4302e50301484fdb9dced8aadd061772
              name: 'Process {#PROCESS.NAME} cpu time (user %)'
              type: DEPENDENT
              key: 'proc[{#PROCESS.NAME},cpuuser%]'
              delay: '0'
              history: 1w
              value_type: FLOAT
              units: '%'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.[?(@.name=="{#PROCESS.NAME}")].cputime_user.sum()'
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
                - type: CHANGE_PER_SECOND
                  parameters:
                    - ''
                - type: MULTIPLIER
                  parameters:
                    - '100'
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: proc.get
              tags:
                - tag: component
                  value: 'process-{#PROCESS.NAME}'
            - uuid: 447be65232d24163b5f80803aac18605
              name: 'Process {#PROCESS.NAME} memory usage'
              type: DEPENDENT
              key: 'proc[{#PROCESS.NAME},memory]'
              delay: '0'
              history: 1w
              units: B
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.[?(@.name=="{#PROCESS.NAME}")].memory.sum()'
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: proc.get
              tags:
                - tag: component
                  value: 'process-{#PROCESS.NAME}'
              trigger_prototypes:
                - uuid: d00bed4be5df4c3cb4b8ea109e079b11
                  expression: |
                    min(/Processes monitor/proc[{#PROCESS.NAME},memory],15m)>
                    {$PROCESSES.MAXCPU.SYSTEM:"{#PROCESS.NAME}"}
                    and
                    {$PROCESSES.MAXCPU.SYSTEM:"{#PROCESS.NAME}"}>0
                  name: 'Process {#PROCESS.NAME} cpu system usage is too high'
                  event_name: 'Process {#PROCESS.NAME} cpu system usage is too high (>{$PROCESSES.MAXCPU.SYSTEM:"{#PROCESS.NAME}"} for 15m)'
                  opdata: 'CPU system usage: {ITEM.LASTVALUE1}'
                  priority: WARNING
                  description: 'Check if the process is running abnormally, is stuck, or consider adjust the threshold as needed.'
                  dependencies:
                    - name: 'Process {#PROCESS.NAME} is not running'
                      expression: |
                        max(/Processes monitor/proc[{#PROCESS.NAME},running],5m)=0
                        and
                        last(/Processes monitor/proc[{#PROCESS.NAME},cmdline])<>""
                      recovery_expression: 'last(/Processes monitor/proc[{#PROCESS.NAME},running])>0'
                  tags:
                    - tag: scope
                      value: performance
                - uuid: 6b7c5d511ce8438697aeaa98f4f46beb
                  expression: |
                    min(/Processes monitor/proc[{#PROCESS.NAME},memory],15m)>
                    {$PROCESSES.MAXCPU.USER:"{#PROCESS.NAME}"}
                    and
                    {$PROCESSES.MAXCPU.USER:"{#PROCESS.NAME}"}>0
                  name: 'Process {#PROCESS.NAME} cpu user usage is too high'
                  event_name: 'Process {#PROCESS.NAME} cpu user usage is too high (>{$PROCESSES.CMAXCPU.USER:"{#PROCESS.NAME}"} for 15m)'
                  opdata: 'CPU user usage: {ITEM.LASTVALUE1}'
                  priority: WARNING
                  description: 'Check if the process is running abnormally, is stuck, or consider adjust the threshold as needed.'
                  dependencies:
                    - name: 'Process {#PROCESS.NAME} is not running'
                      expression: |
                        max(/Processes monitor/proc[{#PROCESS.NAME},running],5m)=0
                        and
                        last(/Processes monitor/proc[{#PROCESS.NAME},cmdline])<>""
                      recovery_expression: 'last(/Processes monitor/proc[{#PROCESS.NAME},running])>0'
                  tags:
                    - tag: scope
                      value: performance
                - uuid: b5697eb7517b4cb0abe8cda498b3bf25
                  expression: |
                    min(/Processes monitor/proc[{#PROCESS.NAME},memory],15m)>
                    {$PROCESSES.MAXMEM:"{#PROCESS.NAME}"}
                    and
                    {$PROCESSES.MAXMEM:"{#PROCESS.NAME}"}>0
                  name: 'Process {#PROCESS.NAME} memory usage is too high'
                  event_name: 'Process {#PROCESS.NAME} memory usage is too high (>{$PROCESSES.MAXMEM:"{#PROCESS.NAME}"} for 15m)'
                  opdata: 'Memory usage: {ITEM.LASTVALUE1}'
                  priority: WARNING
                  description: 'Check if the process is running abnormally, is stuck, or consider adjust the threshold as needed.'
                  dependencies:
                    - name: 'Process {#PROCESS.NAME} is not running'
                      expression: |
                        max(/Processes monitor/proc[{#PROCESS.NAME},running],5m)=0
                        and
                        last(/Processes monitor/proc[{#PROCESS.NAME},cmdline])<>""
                      recovery_expression: 'last(/Processes monitor/proc[{#PROCESS.NAME},running])>0'
                  tags:
                    - tag: scope
                      value: performance
            - uuid: cfddc15410954fae90bf9275616f62e3
              name: 'Process {#PROCESS.NAME} pid'
              type: DEPENDENT
              key: 'proc[{#PROCESS.NAME},pid]'
              delay: '0'
              history: 365d
              trends: '0'
              value_type: TEXT
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.[?(@.name=="{#PROCESS.NAME}")].pid'
                  error_handler: DISCARD_VALUE
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1w
              master_item:
                key: proc.get
              tags:
                - tag: component
                  value: 'process-{#PROCESS.NAME}'
            - uuid: 2d998d84771245dd9aa82cdfd64c9c65
              name: 'Process {#PROCESS.NAME} running'
              type: DEPENDENT
              key: 'proc[{#PROCESS.NAME},running]'
              delay: '0'
              history: 1w
              valuemap:
                name: 'Process status'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.[?(@.name=="{#PROCESS.NAME}")].name.length()'
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: proc.get
              tags:
                - tag: component
                  value: 'process-{#PROCESS.NAME}'
            - uuid: 959e3b0a264f42c5a07a848f4faf6219
              name: 'Process {#PROCESS.NAME} cpu time (system %)'
              type: DEPENDENT
              key: 'proc[{#PROCESS.NAME},system%]'
              delay: '0'
              history: 1w
              value_type: FLOAT
              units: '%'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.[?(@.name=="{#PROCESS.NAME}")].cputime_system.sum()'
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
                - type: CHANGE_PER_SECOND
                  parameters:
                    - ''
                - type: MULTIPLIER
                  parameters:
                    - '100'
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: proc.get
              tags:
                - tag: component
                  value: 'process-{#PROCESS.NAME}'
            - uuid: ed33cf0c181b41528d2d23b91ccdda6f
              name: 'Process {#PROCESS.NAME} threads'
              type: DEPENDENT
              key: 'proc[{#PROCESS.NAME},threads]'
              delay: '0'
              history: 1w
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.[?(@.name=="{#PROCESS.NAME}")].threads.sum()'
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: proc.get
              tags:
                - tag: component
                  value: 'process-{#PROCESS.NAME}'
          trigger_prototypes:
            - uuid: d4013b91c86f46379c7696e0ee94e8ac
              expression: |
                max(/Processes monitor/proc[{#PROCESS.NAME},running],5m)=0
                and
                last(/Processes monitor/proc[{#PROCESS.NAME},cmdline])<>""
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: 'last(/Processes monitor/proc[{#PROCESS.NAME},running])>0'
              name: 'Process {#PROCESS.NAME} is not running'
              opdata: 'Status: {ITEM.LASTVALUE1} - Command: {ITEM.LASTVALUE2}'
              priority: AVERAGE
              description: 'The process {#PROCESS.NAME} is not running. This could affect any service that needs it.'
              tags:
                - tag: scope
                  value: availability
          parameters:
            - name: inputlist
              value: '{$PROCESSES.LIST}'
            - name: commandlist
              value: '{$PROCESSES.CMD}'
            - name: maxmemlist
              value: '{$PROCESSES.MAXMEM}'
          lld_macro_paths:
            - lld_macro: '{#PROCESS.MAXMEM}'
              path: $.maxmemory
          overrides:
            - name: 'Critical processes'
              step: '1'
              filter:
                conditions:
                  - macro: '{#PROCESS.NAME}'
                    value: '{$PROCESS.CRIT}'
                    formulaid: A
              operations:
                - operationobject: TRIGGER_PROTOTYPE
                  operator: LIKE
                  value: 'is not running'
                  severity: HIGH
                - operationobject: ITEM_PROTOTYPE
                  tags:
                    - tag: scope
                      value: critical-process
                - operationobject: TRIGGER_PROTOTYPE
                  operator: LIKE
                  value: 'is not being executed with the exepected command line'
                  severity: AVERAGE
      tags:
        - tag: class
          value: os
        - tag: target
          value: processes
      macros:
        - macro: '{$PROCESSES.CMD}'
          description: 'Trigger will try to find this defined string in the whole command executed. Use this to default all triggers to this value, or use macro context. Leave empty for no alerts.'
        - macro: '{$PROCESSES.CRIT}'
          value: CHANGE_THIS
          description: 'Which ones of the processes will have a critical trigger. Use regular expression'
        - macro: '{$PROCESSES.LIST}'
          value: CHANGE_THIS
          description: 'A coma delimited list of all process to be monitored. Exact name of the process name. Example: systemd,ndbmtd,process_1,process_2'
        - macro: '{$PROCESSES.MAXCPU.SYSTEM}'
          value: '0'
          description: 'Use this to default all triggers to this value, or use macro context. Remember to consider CPU cores. Leave zero for no alerts'
        - macro: '{$PROCESSES.MAXCPU.USER}'
          value: '0'
          description: 'Use this to default all triggers to this value, or use macro context. Remember to consider CPU cores. Leave zero for no alerts'
        - macro: '{$PROCESSES.MAXMEM}'
          value: '0'
          description: 'Use this to default all triggers to this value, or use macro context. Leave empty or zero for no alerts'
      valuemaps:
        - uuid: c218a7c0b5484bfc85cee58ceb1c127e
          name: 'Process status'
          mappings:
            - value: '0'
              newvalue: 'Not running'
            - type: GREATER_OR_EQUAL
              value: '1'
              newvalue: Running
